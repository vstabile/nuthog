document.addEventListener("DOMContentLoaded", function () {
  // Get references to UI elements
  const mintUrlInput = document.getElementById("mint-url");
  const autoSwapToggle = document.getElementById("auto-swap");
  const notificationsToggle = document.getElementById("notifications");
  const toastNotificationsToggle = document.getElementById(
    "toast-notifications"
  );
  const playSoundsToggle = document.getElementById("play-sounds");
  const showSeedBtn = document.getElementById("show-seed");
  const generateSeedBtn = document.getElementById("generate-seed");
  const seedDisplay = document.getElementById("seed-display");
  const restoreSeedInput = document.getElementById("restore-seed");
  const restoreWalletBtn = document.getElementById("restore-wallet");
  const saveSettingsBtn = document.getElementById("save-btn");
  const statusMessage = document.getElementById("status-message");

  // Load settings from storage
  loadSettings();

  // Event listeners
  showSeedBtn.addEventListener("click", showSeedPhrase);
  generateSeedBtn.addEventListener("click", generateNewSeed);
  restoreWalletBtn.addEventListener("click", restoreWallet);
  saveSettingsBtn.addEventListener("click", saveSettings);

  // Function to load settings
  function loadSettings(settings, wallet) {
    const defaultSettings = {
      mintUrl: "https://legend.lnbits.com/cashu/api/v1/4gr9Xcmz3XEkUNwiBiQGoC",
      notificationsEnabled: true,
      useToastNotifications: true,
      playSounds: true,
    };

    // Use provided settings or defaults
    settings = settings || defaultSettings;

    // Update UI with settings
    mintUrlInput.value = settings.mintUrl;
    notificationsToggle.checked = settings.notificationsEnabled;
    toastNotificationsToggle.checked = settings.useToastNotifications !== false;
    playSoundsToggle.checked = settings.playSounds !== false;

    // Check if wallet exists
    if (wallet && wallet.seedPhrase) {
      showSeedBtn.disabled = false;

      // If the wallet was auto-generated, show a notification to the user
      if (wallet.autoGenerated) {
        showStatus(
          "A wallet has been automatically generated for you. Please back up your seed phrase!",
          "warning"
        );
      }
    } else {
      showSeedBtn.disabled = true;
      showStatus(
        "No wallet found. Generate a new seed phrase or restore from existing.",
        "error"
      );
    }
  }

  // Function to save settings
  function saveSettings() {
    const settings = {
      mintUrl: mintUrlInput.value.trim(),
      notificationsEnabled: notificationsToggle.checked,
      useToastNotifications: toastNotificationsToggle.checked,
      playSounds: playSoundsToggle.checked,
    };

    // Validate mint URL
    if (!settings.mintUrl) {
      showStatus("Please enter a valid mint URL", "error");
      return;
    }

    chrome.storage.local.set({ settings }, function () {
      showStatus("Settings saved successfully!", "success");

      // Notify background script about settings change
      chrome.runtime.sendMessage({
        action: "settingsUpdated",
        settings: settings,
      });
    });
  }

  // Function to show seed phrase
  function showSeedPhrase() {
    chrome.storage.local.get(["wallet"], function (data) {
      if (data.wallet && data.wallet.seedPhrase) {
        seedDisplay.textContent = data.wallet.seedPhrase;
        seedDisplay.classList.remove("hidden");
        showSeedBtn.textContent = "Hide Seed Phrase";
        showSeedBtn.removeEventListener("click", showSeedPhrase);
        showSeedBtn.addEventListener("click", hideSeedPhrase);

        // If this is an auto-generated wallet being viewed for the first time, mark it as viewed
        if (data.wallet.autoGenerated && !data.wallet.seedViewed) {
          const updatedWallet = {
            ...data.wallet,
            seedViewed: true,
          };
          chrome.storage.local.set({ wallet: updatedWallet });

          showStatus(
            "This is your auto-generated wallet seed phrase. Please back it up securely!",
            "warning"
          );
        }
      } else {
        showStatus(
          "No wallet found. Generate a new seed phrase first.",
          "error"
        );
      }
    });
  }

  // Function to hide seed phrase
  function hideSeedPhrase() {
    seedDisplay.classList.add("hidden");
    showSeedBtn.textContent = "Show Seed Phrase";
    showSeedBtn.removeEventListener("click", hideSeedPhrase);
    showSeedBtn.addEventListener("click", showSeedPhrase);
  }

  // Function to generate a new seed phrase
  function generateNewSeed() {
    if (
      confirm(
        "This will generate a new wallet and replace any existing one. Make sure you have backed up your current seed phrase if needed. Continue?"
      )
    ) {
      // Generate a new BIP-39 seed phrase (12 words)
      // In a real implementation, you would use a proper BIP-39 library
      // For this example, we'll simulate it with a placeholder

      // This is just a simulation - in a real app, use a proper BIP-39 library
      const wordList = [
        "abandon",
        "ability",
        "able",
        "about",
        "above",
        "absent",
        "absorb",
        "abstract",
        "absurd",
        "abuse",
        "access",
        "accident",
        "account",
        "accuse",
        "achieve",
        "acid",
        "acoustic",
        "acquire",
        "across",
        "act",
        "action",
        "actor",
        "actress",
        "actual",
        "adapt",
        "add",
        "addict",
        "address",
        "adjust",
        "admit",
        "adult",
        "advance",
        "advice",
        "aerobic",
        "affair",
        "afford",
        "afraid",
        "again",
        "age",
        "agent",
        "agree",
        "ahead",
        "aim",
        "air",
        "airport",
        "aisle",
        "alarm",
        "album",
        "alcohol",
        "alert",
        "alien",
        "all",
        "alley",
        "allow",
        "almost",
        "alone",
        "alpha",
        "already",
        "also",
        "alter",
        "always",
        "amateur",
        "amazing",
        "among",
        "amount",
        "amused",
        "analyst",
        "anchor",
        "ancient",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "announce",
        "annual",
        "another",
        "answer",
        "antenna",
        "antique",
        "anxiety",
        "any",
        "apart",
        "apology",
        "appear",
        "apple",
        "approve",
        "april",
        "arch",
        "arctic",
        "area",
        "arena",
        "argue",
        "arm",
        "armed",
        "armor",
        "army",
        "around",
        "arrange",
        "arrest",
      ];

      // Generate 12 random words from the list
      let seedPhrase = [];
      for (let i = 0; i < 12; i++) {
        const randomIndex = Math.floor(Math.random() * wordList.length);
        seedPhrase.push(wordList[randomIndex]);
      }

      const newSeedPhrase = seedPhrase.join(" ");

      // Create a new wallet object
      const wallet = {
        seedPhrase: newSeedPhrase,
        createdAt: Date.now(),
        autoGenerated: false,
        seedViewed: true,
      };

      // Save to storage
      chrome.storage.local.set({ wallet }, function () {
        // Show the seed phrase
        seedDisplay.textContent = newSeedPhrase;
        seedDisplay.classList.remove("hidden");
        showSeedBtn.textContent = "Hide Seed Phrase";
        showSeedBtn.disabled = false;
        showSeedBtn.removeEventListener("click", showSeedPhrase);
        showSeedBtn.addEventListener("click", hideSeedPhrase);

        showStatus(
          "New wallet generated! Make sure to back up your seed phrase securely.",
          "success"
        );

        // Notify background script about wallet change
        chrome.runtime.sendMessage({
          action: "walletUpdated",
        });
      });
    }
  }

  // Function to restore wallet from seed phrase
  function restoreWallet() {
    const seedPhrase = restoreSeedInput.value.trim();

    if (!seedPhrase) {
      showStatus("Please enter a seed phrase", "error");
      return;
    }

    // Validate seed phrase (basic validation)
    const words = seedPhrase.split(/\s+/);
    if (words.length < 12) {
      showStatus(
        "Invalid seed phrase. It should contain at least 12 words.",
        "error"
      );
      return;
    }

    // Create wallet object
    const wallet = {
      seedPhrase: seedPhrase,
      createdAt: Date.now(),
      autoGenerated: false,
      seedViewed: true,
    };

    // Save to storage
    chrome.storage.local.set({ wallet }, function () {
      showStatus("Wallet restored successfully!", "success");
      restoreSeedInput.value = "";
      showSeedBtn.disabled = false;

      // Notify background script about wallet change
      chrome.runtime.sendMessage({
        action: "walletUpdated",
      });
    });
  }

  // Function to show status message
  function showStatus(message, type) {
    statusMessage.textContent = message;
    statusMessage.className = "status " + type;
    statusMessage.classList.remove("hidden");

    // Hide the message after 5 seconds
    setTimeout(function () {
      statusMessage.classList.add("hidden");
    }, 5000);
  }
});
